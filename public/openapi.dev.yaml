openapi: 3.0.3
info:
  title: Auth Service API
  version: 1.0.0
  description: |
    Production-ready authentication microservice (Koa, TypeScript).

    **Base URL:** `/api/v1`
servers:
  - url: https://auth-service-test.duckdns.org/api/v1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    clientKey:
      type: apiKey
      in: header
      name: X-Client-Key
    superSecretKey:
      type: apiKey
      in: header
      name: x-super-secret-key
  schemas:
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
        scope:
          type: string
          description: Space-delimited list of scopes granted
        aud:
          type: string
          description: Audience for which the token is intended
        refresh_token:
          type: string
        user_id:
          type: string
    RevocationResponse:
      type: object
      properties:
        revoked:
          type: boolean
      example:
        revoked: true
    MFAFactorsItem:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time

paths:
  /login:
    post:
      summary: User login
      description: |
        **Authenticate a user (BFF/S2S only).**
        Receives username and password, returns a signed access token (JWT/PASETO), a refresh token (opaque, rotatable), and user/session info.
        Requires the `X-Client-Key` header for S2S authentication. Rate limited. Returns 401 on invalid credentials or missing client key.
      security:
        - clientKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required: [username, password]
      responses:
        '200':
          description: Login successful. Returns access and refresh tokens.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
        '400':
          description: Validation error

  /refresh-token:
    post:
      summary: Rotate refresh token
      description: |
        **Rotate and reuse-detect refresh tokens.**
        Receives a valid userId and refreshToken, issues a new access/refresh token pair. Detects reuse and revokes all sessions if detected.
        Accepts refreshToken in body or cookie. Requires `X-Client-Key` header. Returns 401 if invalid, expired, or reused.
      security:
        - clientKey: []
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
          required: false
          description: Refresh token (alternative to body)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                refreshToken:
                  type: string
                aud:
                  type: string
                  description: Audience for which the new token is intended (optional)
                scope:
                  type: string
                  description: Space-delimited list of scopes to request (optional)
              required: [userId]
      responses:
        '200':
          description: Token refreshed. Returns new access and refresh tokens.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
        '400':
          description: Validation error

  /super/create-user:
    post:
      summary: Create user (superuser, protected)
      description: |
        **Create a new user (superuser only).**
        Protected endpoint, requires `x-super-secret-key` header (stored in AWS Secrets Manager). Only accessible by superusers. Returns 403 if key is missing or invalid.
      security:
        - superSecretKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required: [username, email, password]
      responses:
        '201':
          description: User created. Returns the new user info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
        '403':
          description: Forbidden
        '400':
          description: Validation error

  /revoke:
    post:
      summary: Revoke refresh tokens
      description: |
        **Revoke all refresh tokens for a user or a specific token by jti.**
        Accepts userId and/or jti in the body. Revokes all sessions for the user or a single session. Requires `X-Client-Key` header.
      security:
        - clientKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID to revoke all sessions (optional)
                jti:
                  type: string
                  description: Token JTI to revoke a specific session (optional)
      responses:
        '200':
          description: Revocation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevocationResponse'
        '400':
          description: Validation error
        '401':
          description: Unauthorized

  /.well-known/jwks.json:
    get:
      summary: JWKS endpoint
      description: |
        **Returns the public JWKS for JWT validation.**
        Used by downstream services to validate JWT signatures.
      responses:
        '200':
          description: JWKS JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                        crv:
                          type: string
                        x:
                          type: string
                        y:
                          type: string
                        alg:
                          type: string
                        use:
                          type: string
                        kid:
                          type: string
              examples:
                ecExample:
                  summary: Example EC key
                  value:
                    keys:
                      - kty: EC
                        crv: P-256
                        x: GIZ7xTN3d6dC2-AKyVTgzE05Aj1CJhjbRQEKRajdibs
                        y: SGfuW2zER03GybgHkEVMJG5evEelWsEmLSF_opdNGhs
                        alg: ES256
                        use: sig
                        kid: main

  /mfa/totp/setup:
    post:
      summary: Iniciar setup de TOTP MFA
      description: Genera un secreto TOTP y otpauth URL para apps como Google Authenticator. Protegido con client-auth y requiere sesión (Bearer).
      security:
        - clientKey: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceName:
                  type: string
              required: []
      responses:
        '200':
          description: Devuelve otpauthUrl para escanear en la app TOTP.
          content:
            application/json:
              schema:
                type: object
                properties:
                  otpauthUrl:
                    type: string

  /mfa/totp/activate:
    post:
      summary: Activar TOTP MFA
      description: Valida el código TOTP y activa el factor para el usuario.
      security:
        - clientKey: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required: [token]
      responses:
        '200':
          description: Activado
          content:
            application/json:
              schema:
                type: object
                properties:
                  activated:
                    type: boolean
        '400':
          description: Código inválido

  /mfa/verify:
    post:
      summary: Verificar TOTP MFA
      description: Verifica el código TOTP y responde si es válido.
      security:
        - clientKey: []
      parameters:
        - in: header
          name: X-Login-Tx
          required: false
          schema:
            type: string
          description: Identificador de transacción de login (opcional, también puede ir en el body)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login_tx:
                  type: string
                  description: Identificador de transacción de login (opcional si se envía por header)
                token:
                  type: string
              required: [token]
      responses:
        '200':
          description: MFA verificado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
