openapi: 3.0.3
info:
  title: Auth Service API
  version: 1.0.0
  description: |
    Production-ready authentication microservice (Koa, TypeScript).
    
    **Base URL:** `/api/v1`
servers:
- url: http://localhost:6080/api/v1
paths:
  /login:
    post:
      summary: User login
      description: |
        Authenticates a user with username and password. Returns a PASETO access token, a refresh token, and basic user info on success.
        Rate limited. Returns 401 on invalid credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required: [username, password]
      responses:
        '200':
          description: Login successful. Returns access and refresh tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
        '401':
          description: Unauthorized
        '400':
          description: Validation error
  /refresh-token:
    post:
      summary: Rotate refresh token
      description: |
        Rotates a refresh token and issues a new access token and refresh token. Requires a valid userId and refreshToken pair.
        Returns 401 if the refresh token is invalid or expired.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                refreshToken:
                  type: string
              required: [userId, refreshToken]
      responses:
        '200':
          description: Token refreshed. Returns new access and refresh tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Unauthorized
        '400':
          description: Validation error
  /get-payload:
    post:
      summary: Get token payload
      description: |
        Verifies a PASETO token and returns its payload (user id, username, and key). Returns 401 if the token is invalid or expired.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required: [token]
      responses:
        '200':
          description: Token payload. Returns user info if token is valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  key:
                    type: string
        '401':
          description: Unauthorized
        '400':
          description: Validation error
  /super/create-user:
    post:
      summary: Create user (superuser, protected)
      description: |
        Creates a new user in the system. This endpoint is strictly protected and can only be accessed by super users or root users who possess a unique, strong secret key.
        The required `x-super-secret-key` header must contain the secret value, which is securely stored in AWS Secrets Manager and never exposed in code or configuration files.
        Attempts to access this endpoint without the correct secret key will result in a 403 Forbidden error.
      parameters:
        - in: header
          name: x-super-secret-key
          required: true
          schema:
            type: string
          description: Secret key required to access this endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                key:
                  type: string
              required: [username, email, password, key]
      responses:
        '201':
          description: User created. Returns the new user and key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                  key:
                    type: string
        '403':
          description: Forbidden
        '400':
          description: Validation error
