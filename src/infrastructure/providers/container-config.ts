import { RevokeTokenUseCase } from '../../application/usecases/auth/revoke-token.usecase';
import { Argon2PasswordHasher } from '../../infrastructure/crypto/argon-2-password-hasher';
import { Container } from 'inversify';
import { TYPES } from './types';
import { LoginUseCase } from '../../application/usecases/auth/login.usecase';
import { PgUserRepository } from '../adapters/repositories/postgres/user.postgres.repository';
import { RefreshTokenUseCase } from '../../application/usecases/auth/refresh-token.usecase';
import { AuthController } from '../../api/controllers/auth.controller';
import { SuperUserController } from '../../api/controllers/super-user.controller';
import { CreateUserUseCase } from '../../application/usecases/auth/create-user.usecase';
import { GetPayloadUseCase } from '../../application/usecases/auth/get-payload.usecase';
import { PgRefreshTokenRepository } from '../adapters/repositories/postgres/refresh-token.postgres.repository';
import { SetupTotpUseCase } from '../../application/usecases/mfa/setup-totp.usecase';
import { ActivateTotpUseCase } from '../../application/usecases/mfa/activate-totp.usecase';
import { VerifyTotpUseCase } from '../../application/usecases/mfa/verify-totp.usecase';
import { ListFactorsUseCase } from '../../application/usecases/mfa/list-factors.usecase';
import { VerifyRecoveryCodeUseCase } from '../../application/usecases/mfa/verify-recovery-code.usecase';
import { NeedsMfaUseCase } from '../../application/usecases/mfa/needs-mfa.usecase';
import { IssueTokensForUserIdUseCase } from '../../application/usecases/auth/issue-tokens-for-user-id.usecase';
import { PgMfaFactorsRepository } from '../adapters/repositories/postgres/mfa-factors.repository';
import { PgRecoveryCodesRepository } from '../adapters/repositories/postgres/recovery-codes.repository';

const container = new Container();
container.bind(TYPES.UserRepository).to(PgUserRepository);
container.bind(TYPES.RefreshTokenRepository).to(PgRefreshTokenRepository);
container.bind(TYPES.MfaFactorsRepository).to(PgMfaFactorsRepository);
container.bind(TYPES.RecoveryCodesRepository).to(PgRecoveryCodesRepository);
container.bind<Argon2PasswordHasher>(TYPES.PasswordHasher).to(Argon2PasswordHasher).inSingletonScope();
container.bind<LoginUseCase>(TYPES.LoginUseCase).to(LoginUseCase);
container.bind<CreateUserUseCase>(TYPES.CreateUserUseCase).to(CreateUserUseCase);
container.bind<GetPayloadUseCase>(TYPES.GetPayloadUseCase).to(GetPayloadUseCase);
container.bind<RefreshTokenUseCase>(TYPES.RefreshTokenUseCase).to(RefreshTokenUseCase);
container.bind<IssueTokensForUserIdUseCase>(TYPES.IssueTokensForUserIdUseCase).to(IssueTokensForUserIdUseCase);
container.bind<SetupTotpUseCase>(TYPES.SetupTotpUseCase).to(SetupTotpUseCase);
container.bind<ActivateTotpUseCase>(TYPES.ActivateTotpUseCase).to(ActivateTotpUseCase);
container.bind<VerifyTotpUseCase>(TYPES.VerifyTotpUseCase).to(VerifyTotpUseCase);
container.bind<ListFactorsUseCase>(TYPES.ListFactorsUseCase).to(ListFactorsUseCase);
container.bind<VerifyRecoveryCodeUseCase>(TYPES.VerifyRecoveryCodeUseCase).to(VerifyRecoveryCodeUseCase);
container.bind<RevokeTokenUseCase>(TYPES.RevokeTokenUseCase).to(RevokeTokenUseCase);
container.bind<NeedsMfaUseCase>(TYPES.NeedsMfaUseCase).to(NeedsMfaUseCase);
container.bind<AuthController>(TYPES.AuthController).to(AuthController);
container.bind<SuperUserController>(TYPES.SuperUserController).to(SuperUserController);

export { container };